2018-08-14 10:47:14,108 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 10:47:14,145 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 10:47:14,211 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 10:47:14,220 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 10:47:14,221 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 10:47:14,762 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (540ms)
2018-08-14 10:47:14,763 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 10:47:14,764 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 02:47:14 GMT
2018-08-14 10:47:14,764 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 10:47:14,765 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 10:47:14,765 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 10:47:14,767 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 10:47:14,767 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 10:47:14,770 INFO (TmallController.java:185)- paramMap ====== {deviceState=255fe0000000000, deviceId=b765010000}
2018-08-14 10:47:14,771 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 10:47:14,772 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 10:47:14,820 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (47ms)
2018-08-14 10:47:14,821 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 10:47:14,822 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 02:47:14 GMT
2018-08-14 10:47:14,822 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 10:47:14,823 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 10:47:14,824 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 10:47:14,824 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 10:47:14,825 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 10:47:14,864 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 10:47:14,864 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 10:47:14,956 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-provider-obox
2018-08-14 10:47:14,956 INFO (TmallController.java:200)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 10:50:20,863 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 10:50:20,864 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 10:50:20,941 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 10:50:20,942 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 10:50:20,942 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 10:50:21,040 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (97ms)
2018-08-14 10:50:21,041 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 10:50:21,042 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 02:50:21 GMT
2018-08-14 10:50:21,042 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 10:50:21,042 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 10:50:21,042 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 10:50:21,043 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 10:50:21,043 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 10:50:21,044 INFO (TmallController.java:185)- paramMap ====== {deviceState=255fe0000000000, deviceId=b765010000}
2018-08-14 10:50:24,737 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 10:50:24,738 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 10:50:24,818 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (78ms)
2018-08-14 10:50:24,820 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 10:50:24,822 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 02:50:24 GMT
2018-08-14 10:50:24,824 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 10:50:24,826 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 10:50:24,828 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 10:50:24,830 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 10:50:24,832 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 10:50:24,838 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 10:50:24,840 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 10:50:24,845 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-provider-obox
2018-08-14 10:50:58,617 INFO (TmallController.java:200)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 10:51:12,868 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 10:51:12,868 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 10:51:12,897 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 10:51:12,899 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 10:51:12,899 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 10:51:12,934 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (35ms)
2018-08-14 10:51:12,935 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 10:51:12,935 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 02:51:12 GMT
2018-08-14 10:51:12,935 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 10:51:12,935 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 10:51:12,935 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 10:51:12,936 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 10:51:12,936 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 10:57:49,471 INFO (TmallController.java:185)- paramMap ====== {deviceState=255fe0000000000, deviceId=b765010000}
2018-08-14 10:57:50,575 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 10:57:50,576 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 10:57:50,667 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (90ms)
2018-08-14 10:57:50,668 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 10:57:50,669 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 02:57:50 GMT
2018-08-14 10:57:50,669 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 10:57:50,670 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 10:57:50,671 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 10:57:50,672 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 10:57:50,673 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 10:57:50,674 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 10:57:50,675 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 10:57:50,677 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-provider-obox
2018-08-14 10:57:50,677 INFO (TmallController.java:200)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:03:50,092 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 11:03:50,092 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:03:50,156 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:03:50,161 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:03:50,162 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:03:50,242 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (79ms)
2018-08-14 11:03:50,243 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:03:50,244 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:03:50 GMT
2018-08-14 11:03:50,244 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:03:50,245 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:03:50,246 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:03:50,247 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:03:50,248 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:06:39,234 INFO (TmallController.java:185)- paramMap ====== {deviceState=255fe0000000000, deviceId=b765010000}
2018-08-14 11:06:44,675 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:06:44,677 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:06:44,800 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (120ms)
2018-08-14 11:06:44,801 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:06:44,803 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:06:44 GMT
2018-08-14 11:06:44,804 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:06:44,805 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:06:44,806 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:06:44,808 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:06:44,809 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:06:44,814 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:06:44,815 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:06:44,818 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-provider-obox
2018-08-14 11:08:26,732 INFO (TmallController.java:200)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:08:32,727 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 11:08:32,727 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:08:32,791 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:08:32,793 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:08:32,793 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:08:32,859 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (65ms)
2018-08-14 11:08:32,859 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:08:32,860 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:08:32 GMT
2018-08-14 11:08:32,860 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:08:32,861 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:08:32,861 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:08:32,861 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:08:32,862 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:09:23,645 INFO (TmallController.java:185)- paramMap ====== {deviceState=255fe0000000000, deviceId=b765010000}
2018-08-14 11:09:25,637 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:09:25,638 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:09:25,709 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (69ms)
2018-08-14 11:09:25,710 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:09:25,712 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:09:25 GMT
2018-08-14 11:09:25,713 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:09:25,715 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:09:25,716 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:09:25,718 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:09:25,719 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:09:25,723 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:09:25,724 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:09:25,727 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-provider-obox
2018-08-14 11:09:29,065 INFO (TmallController.java:200)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:09:49,112 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-08-14 11:10:10,467 INFO (StartupInfoLogger.java:57)- Started ConsumerApplication in 26.854 seconds (JVM running for 29.359)
2018-08-14 11:10:24,872 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 11:10:24,873 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:10:24,914 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:10:29,313 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:10:29,317 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:10:32,639 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (3319ms)
2018-08-14 11:10:32,640 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:10:32,641 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:10:32 GMT
2018-08-14 11:10:32,642 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:10:32,643 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:10:32,644 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:10:32,645 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:10:32,646 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:10:40,549 INFO (TmallController.java:190)- paramMap ====== {deviceState=255fe0000000000, deviceId=b765010000}
2018-08-14 11:10:40,553 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:10:40,554 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:10:40,608 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (52ms)
2018-08-14 11:10:40,609 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:10:40,610 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:10:40 GMT
2018-08-14 11:10:40,611 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:10:40,611 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:10:40,612 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:10:40,614 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:10:40,614 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:10:40,619 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:10:40,620 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:10:40,709 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-provider-obox
2018-08-14 11:10:40,710 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:11:03,047 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 11:11:03,048 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:11:03,076 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:11:03,077 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:11:03,077 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:11:03,113 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (35ms)
2018-08-14 11:11:03,114 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:11:03,114 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:11:03 GMT
2018-08-14 11:11:03,114 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:11:03,114 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:11:03,114 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:11:03,115 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:11:03,115 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:11:31,071 INFO (TmallController.java:190)- paramMap ====== {deviceState=255fe0000000000, deviceId=b765010000}
2018-08-14 11:11:41,111 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:11:41,112 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:11:41,149 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (36ms)
2018-08-14 11:11:41,149 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:11:41,149 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:11:41 GMT
2018-08-14 11:11:41,150 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:11:41,150 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:11:41,150 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:11:41,150 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:11:41,150 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:11:41,151 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:11:41,151 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:11:41,152 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-provider-obox
2018-08-14 11:11:41,152 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:38:43,429 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 11:38:43,430 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:38:43,494 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:38:43,499 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:38:43,500 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:38:43,586 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (86ms)
2018-08-14 11:38:43,586 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:38:43,586 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:38:43 GMT
2018-08-14 11:38:43,586 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:38:43,586 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:38:43,586 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:38:43,586 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:38:43,586 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:39:00,513 INFO (TmallController.java:190)- paramMap ====== {deviceState=255fe0000000000, deviceId=b765010000}
2018-08-14 11:39:19,038 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:39:19,040 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:39:19,078 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (36ms)
2018-08-14 11:39:19,078 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:39:19,078 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:39:19 GMT
2018-08-14 11:39:19,079 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:39:19,079 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:39:19,079 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:39:19,080 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:39:19,080 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:39:19,080 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:39:19,081 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:39:19,081 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-provider-obox
2018-08-14 11:39:19,082 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:39:29,589 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-08-14 11:39:48,413 INFO (StartupInfoLogger.java:57)- Started ConsumerApplication in 24.02 seconds (JVM running for 24.927)
2018-08-14 11:40:02,968 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 11:40:02,970 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:40:03,040 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:40:03,086 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:40:03,086 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:40:03,649 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (562ms)
2018-08-14 11:40:03,649 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:40:03,650 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:40:03 GMT
2018-08-14 11:40:03,650 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:40:03,650 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:40:03,650 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:40:03,651 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:40:03,651 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:40:29,299 INFO (TmallController.java:190)- paramMap ====== {deviceState=fffe0000000000, deviceId=b765010000}
2018-08-14 11:40:29,300 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:40:29,304 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:40:29,352 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (47ms)
2018-08-14 11:40:29,353 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:40:29,354 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:40:29 GMT
2018-08-14 11:40:29,354 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:40:29,355 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:40:29,356 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:40:29,357 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:40:29,358 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:40:29,362 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:40:29,363 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:40:29,494 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-provider-obox
2018-08-14 11:40:29,495 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:41:08,470 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=50, extensions={extension1=, extension2=}}}
2018-08-14 11:41:08,470 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:41:08,509 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:41:08,510 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:41:08,510 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:41:08,547 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (36ms)
2018-08-14 11:41:08,547 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:41:08,547 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:41:08 GMT
2018-08-14 11:41:08,547 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:41:08,547 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:41:08,548 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:41:08,548 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:41:08,548 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:41:19,011 INFO (TmallController.java:190)- paramMap ====== {deviceState=7ffe0000000000, deviceId=b765010000}
2018-08-14 11:41:19,013 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:41:19,014 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:41:19,061 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (45ms)
2018-08-14 11:41:19,061 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:41:19,062 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:41:19 GMT
2018-08-14 11:41:19,063 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:41:19,064 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:41:19,065 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:41:19,066 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:41:19,067 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:41:19,069 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:41:19,070 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:41:19,072 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-provider-obox
2018-08-14 11:41:19,073 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:43:29,185 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=50, extensions={extension1=, extension2=}}}
2018-08-14 11:43:29,186 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:43:29,239 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:43:29,240 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:43:29,240 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:43:29,304 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (63ms)
2018-08-14 11:43:29,307 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:43:29,308 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:43:29 GMT
2018-08-14 11:43:29,308 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:43:29,309 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:43:29,309 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:43:29,310 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:43:29,310 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:43:36,079 INFO (TmallController.java:190)- paramMap ====== {deviceState=7ffe0000000000, deviceId=b765010000}
2018-08-14 11:43:37,847 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:43:37,849 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:43:37,904 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (62ms)
2018-08-14 11:43:37,904 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:43:37,904 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:43:37 GMT
2018-08-14 11:43:37,904 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:43:37,904 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:43:37,904 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:43:37,904 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:43:37,904 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:43:37,919 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:43:37,919 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:43:38,115 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- HTTP/1.1 200 (204ms)
2018-08-14 11:43:38,115 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] content-type: application/json;charset=UTF-8
2018-08-14 11:43:38,115 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] date: Tue, 14 Aug 2018 03:43:38 GMT
2018-08-14 11:43:38,115 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] transfer-encoding: chunked
2018-08-14 11:43:38,115 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] x-application-context: springcloud-provider-obox:test:8200
2018-08-14 11:43:38,131 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] 
2018-08-14 11:43:38,131 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] {"message":"select success","status":200,"data":{"oboxId":9,"id":9,"obox_name":"OBOX9276","obox_serial_id":"7692000000","obox_version":"0a01154400051004","obox_status":1}}
2018-08-14 11:43:38,131 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- END HTTP (171-byte body)
2018-08-14 11:43:38,131 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> PUT http://springcloud-ali2/aliService/setDeviceStatus/7692000000?status=7ffe0000000000&rfAddr=02 HTTP/1.1
2018-08-14 11:43:38,131 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> END HTTP (0-byte body)
2018-08-14 11:43:38,879 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-ali2
2018-08-14 11:43:52,881 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:45:08,946 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=50, extensions={extension1=, extension2=}}}
2018-08-14 11:45:08,946 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:45:09,010 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:45:09,013 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:45:09,014 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:45:09,096 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (82ms)
2018-08-14 11:45:09,097 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:45:09,098 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:45:09 GMT
2018-08-14 11:45:09,099 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:45:09,100 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:45:09,100 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:45:09,101 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:45:09,102 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:45:18,123 INFO (TmallController.java:190)- paramMap ====== {deviceState=7ffe0000000000, deviceId=b765010000}
2018-08-14 11:45:18,125 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:45:18,126 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:45:18,174 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (47ms)
2018-08-14 11:45:18,175 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:45:18,176 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:45:18 GMT
2018-08-14 11:45:18,177 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:45:18,178 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:45:18,179 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:45:18,180 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:45:18,181 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:45:18,182 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:45:18,183 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:45:18,276 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- HTTP/1.1 200 (91ms)
2018-08-14 11:45:18,276 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] content-type: application/json;charset=UTF-8
2018-08-14 11:45:18,277 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] date: Tue, 14 Aug 2018 03:45:18 GMT
2018-08-14 11:45:18,277 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] transfer-encoding: chunked
2018-08-14 11:45:18,278 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] x-application-context: springcloud-provider-obox:test:8200
2018-08-14 11:45:18,278 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] 
2018-08-14 11:45:18,278 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] {"message":"select success","status":200,"data":{"oboxId":9,"id":9,"obox_name":"OBOX9276","obox_serial_id":"7692000000","obox_version":"0a01154400051004","obox_status":1}}
2018-08-14 11:45:18,279 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- END HTTP (171-byte body)
2018-08-14 11:45:18,280 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> PUT http://springcloud-ali2/aliService/setDeviceStatus/7692000000?status=7ffe0000000000&rfAddr=02 HTTP/1.1
2018-08-14 11:45:18,280 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> END HTTP (0-byte body)
2018-08-14 11:45:18,281 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-ali2
2018-08-14 11:45:18,281 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:54:21,160 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=50, extensions={extension1=, extension2=}}}
2018-08-14 11:54:21,160 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:54:21,245 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:54:21,251 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:54:21,251 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:54:21,390 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (138ms)
2018-08-14 11:54:21,391 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:54:21,391 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:54:21 GMT
2018-08-14 11:54:21,392 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:54:21,392 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:54:21,392 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:54:21,392 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:54:21,393 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:54:27,069 INFO (TmallController.java:190)- paramMap ====== {deviceState=7ffe0000000000, deviceId=b765010000}
2018-08-14 11:54:27,071 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:54:27,072 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:54:27,140 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (67ms)
2018-08-14 11:54:27,141 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:54:27,142 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:54:27 GMT
2018-08-14 11:54:27,142 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:54:27,143 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:54:27,143 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:54:27,145 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:54:27,145 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:54:27,147 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:54:27,148 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:54:27,272 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- HTTP/1.1 200 (123ms)
2018-08-14 11:54:27,273 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] content-type: application/json;charset=UTF-8
2018-08-14 11:54:27,273 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] date: Tue, 14 Aug 2018 03:54:27 GMT
2018-08-14 11:54:27,274 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] transfer-encoding: chunked
2018-08-14 11:54:27,274 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] x-application-context: springcloud-provider-obox:test:8200
2018-08-14 11:54:27,275 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] 
2018-08-14 11:54:27,275 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] {"message":"select success","status":200,"data":{"oboxId":9,"id":9,"obox_name":"OBOX9276","obox_serial_id":"7692000000","obox_version":"0a01154400051004","obox_status":1}}
2018-08-14 11:54:27,275 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- END HTTP (171-byte body)
2018-08-14 11:54:27,277 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> PUT http://springcloud-ali2/aliService/setDeviceStatus/7692000000?status=7ffe0000000000&rfAddr=02 HTTP/1.1
2018-08-14 11:54:27,277 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> END HTTP (0-byte body)
2018-08-14 11:54:27,395 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- HTTP/1.1 200 (117ms)
2018-08-14 11:54:27,395 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] content-type: application/json;charset=UTF-8
2018-08-14 11:54:27,395 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] date: Tue, 14 Aug 2018 03:54:27 GMT
2018-08-14 11:54:27,395 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] transfer-encoding: chunked
2018-08-14 11:54:27,396 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] x-application-context: springcloud-ali2:8899
2018-08-14 11:54:27,396 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] 
2018-08-14 11:54:27,398 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] {"message":"update success","status":205}
2018-08-14 11:54:27,399 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- END HTTP (41-byte body)
2018-08-14 11:54:27,402 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:56:22,478 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 11:56:22,479 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:56:22,540 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:56:22,540 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:56:22,540 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:56:22,630 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (80ms)
2018-08-14 11:56:22,631 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:56:22,632 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:56:22 GMT
2018-08-14 11:56:22,632 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:56:22,633 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:56:22,633 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:56:22,634 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:56:22,635 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:56:27,378 INFO (TmallController.java:190)- paramMap ====== {deviceState=fffe0000000000, deviceId=b765010000}
2018-08-14 11:56:27,380 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:56:27,382 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:56:27,449 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (66ms)
2018-08-14 11:56:27,450 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:56:27,451 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:56:27 GMT
2018-08-14 11:56:27,452 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:56:27,452 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:56:27,453 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:56:27,454 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:56:27,455 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:56:27,458 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:56:27,459 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:56:27,587 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- HTTP/1.1 200 (138ms)
2018-08-14 11:56:27,587 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] content-type: application/json;charset=UTF-8
2018-08-14 11:56:27,587 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] date: Tue, 14 Aug 2018 03:56:27 GMT
2018-08-14 11:56:27,587 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] transfer-encoding: chunked
2018-08-14 11:56:27,587 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] x-application-context: springcloud-provider-obox:test:8200
2018-08-14 11:56:27,587 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] 
2018-08-14 11:56:27,587 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] {"message":"select success","status":200,"data":{"oboxId":9,"id":9,"obox_name":"OBOX9276","obox_serial_id":"7692000000","obox_version":"0a01154400051004","obox_status":1}}
2018-08-14 11:56:27,603 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- END HTTP (171-byte body)
2018-08-14 11:56:27,603 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> PUT http://springcloud-ali2/aliService/setDeviceStatus/7692000000?status=fffe0000000000&rfAddr=02 HTTP/1.1
2018-08-14 11:56:27,603 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> END HTTP (0-byte body)
2018-08-14 11:56:27,622 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- HTTP/1.1 200 (15ms)
2018-08-14 11:56:27,622 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] content-type: application/json;charset=UTF-8
2018-08-14 11:56:27,623 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] date: Tue, 14 Aug 2018 03:56:27 GMT
2018-08-14 11:56:27,623 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] transfer-encoding: chunked
2018-08-14 11:56:27,623 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] x-application-context: springcloud-ali2:8899
2018-08-14 11:56:27,624 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] 
2018-08-14 11:56:27,624 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] {"message":"update success","status":205}
2018-08-14 11:56:27,625 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- END HTTP (41-byte body)
2018-08-14 11:56:27,625 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 11:58:07,789 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 11:58:07,789 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 11:58:07,866 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 11:58:07,870 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:58:07,871 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:58:07,943 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (71ms)
2018-08-14 11:58:07,944 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:58:07,944 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:58:07 GMT
2018-08-14 11:58:07,945 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:58:07,945 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:58:07,946 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:58:07,947 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:58:07,947 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:58:11,515 INFO (TmallController.java:190)- paramMap ====== {deviceState=fffe0000000000, deviceId=b765010000}
2018-08-14 11:58:11,517 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 11:58:11,518 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 11:58:11,585 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (66ms)
2018-08-14 11:58:11,586 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 11:58:11,587 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 03:58:11 GMT
2018-08-14 11:58:11,588 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 11:58:11,589 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 11:58:11,589 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 11:58:11,590 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"name":"Lamp1","state":"00fe0000000000","device_type":"01","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 11:58:11,591 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (229-byte body)
2018-08-14 11:58:11,593 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 11:58:11,593 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 11:58:11,685 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- HTTP/1.1 200 (91ms)
2018-08-14 11:58:11,686 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] content-type: application/json;charset=UTF-8
2018-08-14 11:58:11,687 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] date: Tue, 14 Aug 2018 03:58:11 GMT
2018-08-14 11:58:11,687 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] transfer-encoding: chunked
2018-08-14 11:58:11,688 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] x-application-context: springcloud-provider-obox:test:8200
2018-08-14 11:58:11,688 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] 
2018-08-14 11:58:11,689 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] {"message":"select success","status":200,"data":{"oboxId":9,"id":9,"obox_name":"OBOX9276","obox_serial_id":"7692000000","obox_version":"0a01154400051004","obox_status":1}}
2018-08-14 11:58:11,689 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- END HTTP (171-byte body)
2018-08-14 11:58:11,690 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> PUT http://springcloud-ali2/aliService/setDeviceStatus/7692000000?status=fffe0000000000&rfAddr=02 HTTP/1.1
2018-08-14 11:58:11,691 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> END HTTP (0-byte body)
2018-08-14 11:58:11,705 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- HTTP/1.1 200 (13ms)
2018-08-14 11:58:11,706 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] content-type: application/json;charset=UTF-8
2018-08-14 11:58:11,706 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] date: Tue, 14 Aug 2018 03:58:11 GMT
2018-08-14 11:58:11,707 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] transfer-encoding: chunked
2018-08-14 11:58:11,707 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] x-application-context: springcloud-ali2:8899
2018-08-14 11:58:11,708 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] 
2018-08-14 11:58:11,708 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] {"message":"update success","status":205}
2018-08-14 11:58:11,709 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- END HTTP (41-byte body)
2018-08-14 11:58:11,710 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 13:52:42,431 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 13:52:42,432 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 13:52:42,506 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 13:52:42,512 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 13:52:42,513 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 13:53:12,556 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- ERROR SocketTimeoutException: connect timed out (30042ms)
2018-08-14 13:53:12,560 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] java.net.SocketTimeoutException: connect timed out
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1220)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1156)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1050)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:984)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1564)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1492)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at feign.Client$Default.convertResponse(Client.java:152)
	at feign.Client$Default.execute(Client.java:74)
	at org.springframework.cloud.sleuth.instrument.web.client.feign.TraceFeignClient.execute(TraceFeignClient.java:92)
	at org.springframework.cloud.netflix.feign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:80)
	at org.springframework.cloud.netflix.feign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:48)
	at com.netflix.client.AbstractLoadBalancerAwareClient$1.call(AbstractLoadBalancerAwareClient.java:109)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:303)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:287)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:231)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:228)
	at rx.Observable.unsafeSubscribe(Observable.java:10211)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.drain(OnSubscribeConcatMap.java:286)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.onNext(OnSubscribeConcatMap.java:144)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:185)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:180)
	at rx.Observable.unsafeSubscribe(Observable.java:10211)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:94)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:42)
	at rx.Observable.unsafeSubscribe(Observable.java:10211)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1.call(OperatorRetryWithPredicate.java:127)
	at rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.enqueue(TrampolineScheduler.java:73)
	at rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.schedule(TrampolineScheduler.java:52)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.onNext(OperatorRetryWithPredicate.java:79)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.onNext(OperatorRetryWithPredicate.java:45)
	at rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer.request(ScalarSynchronousObservable.java:276)
	at rx.Subscriber.setProducer(Subscriber.java:209)
	at rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe.call(ScalarSynchronousObservable.java:138)
	at rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe.call(ScalarSynchronousObservable.java:129)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10307)
	at rx.Observable.subscribe(Observable.java:10274)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:445)
	at rx.observables.BlockingObservable.single(BlockingObservable.java:342)
	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:117)
	at org.springframework.cloud.netflix.feign.ribbon.LoadBalancerFeignClient.execute(LoadBalancerFeignClient.java:63)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:97)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:76)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:103)
	at com.sun.proxy.$Proxy151.getDevice(Unknown Source)
	at com.bright.apollo.controller.TmallController.tmallCmd(TmallController.java:186)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:110)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.cloud.sleuth.instrument.web.TraceFilter.doFilter(TraceFilter.java:186)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2018-08-14 13:53:12,567 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END ERROR
2018-08-14 13:53:12,569 INFO (TmallController.java:193)- exception ====== feign.RetryableException: connect timed out executing GET http://springcloud-provider-device/device/b765010000
2018-08-14 13:53:12,570 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 13:54:20,163 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 13:54:20,164 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 13:54:20,220 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 13:54:20,225 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 13:54:20,225 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 13:54:50,234 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- ERROR SocketTimeoutException: connect timed out (30007ms)
2018-08-14 13:54:50,236 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] java.net.SocketTimeoutException: connect timed out
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1220)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1156)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1050)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:984)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1564)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1492)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at feign.Client$Default.convertResponse(Client.java:152)
	at feign.Client$Default.execute(Client.java:74)
	at org.springframework.cloud.sleuth.instrument.web.client.feign.TraceFeignClient.execute(TraceFeignClient.java:92)
	at org.springframework.cloud.netflix.feign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:80)
	at org.springframework.cloud.netflix.feign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:48)
	at com.netflix.client.AbstractLoadBalancerAwareClient$1.call(AbstractLoadBalancerAwareClient.java:109)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:303)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:287)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:231)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:228)
	at rx.Observable.unsafeSubscribe(Observable.java:10211)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.drain(OnSubscribeConcatMap.java:286)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.onNext(OnSubscribeConcatMap.java:144)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:185)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:180)
	at rx.Observable.unsafeSubscribe(Observable.java:10211)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:94)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:42)
	at rx.Observable.unsafeSubscribe(Observable.java:10211)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1.call(OperatorRetryWithPredicate.java:127)
	at rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.enqueue(TrampolineScheduler.java:73)
	at rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.schedule(TrampolineScheduler.java:52)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.onNext(OperatorRetryWithPredicate.java:79)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.onNext(OperatorRetryWithPredicate.java:45)
	at rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer.request(ScalarSynchronousObservable.java:276)
	at rx.Subscriber.setProducer(Subscriber.java:209)
	at rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe.call(ScalarSynchronousObservable.java:138)
	at rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe.call(ScalarSynchronousObservable.java:129)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10307)
	at rx.Observable.subscribe(Observable.java:10274)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:445)
	at rx.observables.BlockingObservable.single(BlockingObservable.java:342)
	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:117)
	at org.springframework.cloud.netflix.feign.ribbon.LoadBalancerFeignClient.execute(LoadBalancerFeignClient.java:63)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:97)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:76)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:103)
	at com.sun.proxy.$Proxy151.getDevice(Unknown Source)
	at com.bright.apollo.controller.TmallController.tmallCmd(TmallController.java:186)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:110)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.cloud.sleuth.instrument.web.TraceFilter.doFilter(TraceFilter.java:186)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2018-08-14 13:54:50,239 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END ERROR
2018-08-14 13:54:50,240 INFO (TmallController.java:193)- exception ====== feign.RetryableException: connect timed out executing GET http://springcloud-provider-device/device/b765010000
2018-08-14 13:54:50,240 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 13:58:22,261 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 13:58:22,261 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 13:58:22,314 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 13:58:22,316 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 13:58:22,316 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 13:58:52,320 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- ERROR SocketTimeoutException: connect timed out (30003ms)
2018-08-14 13:58:52,322 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] java.net.SocketTimeoutException: connect timed out
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1220)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1156)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1050)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:984)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1564)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1492)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at feign.Client$Default.convertResponse(Client.java:152)
	at feign.Client$Default.execute(Client.java:74)
	at org.springframework.cloud.sleuth.instrument.web.client.feign.TraceFeignClient.execute(TraceFeignClient.java:92)
	at org.springframework.cloud.netflix.feign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:80)
	at org.springframework.cloud.netflix.feign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:48)
	at com.netflix.client.AbstractLoadBalancerAwareClient$1.call(AbstractLoadBalancerAwareClient.java:109)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:303)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:287)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:231)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:228)
	at rx.Observable.unsafeSubscribe(Observable.java:10211)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.drain(OnSubscribeConcatMap.java:286)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.onNext(OnSubscribeConcatMap.java:144)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:185)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:180)
	at rx.Observable.unsafeSubscribe(Observable.java:10211)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:94)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:42)
	at rx.Observable.unsafeSubscribe(Observable.java:10211)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1.call(OperatorRetryWithPredicate.java:127)
	at rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.enqueue(TrampolineScheduler.java:73)
	at rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.schedule(TrampolineScheduler.java:52)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.onNext(OperatorRetryWithPredicate.java:79)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.onNext(OperatorRetryWithPredicate.java:45)
	at rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer.request(ScalarSynchronousObservable.java:276)
	at rx.Subscriber.setProducer(Subscriber.java:209)
	at rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe.call(ScalarSynchronousObservable.java:138)
	at rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe.call(ScalarSynchronousObservable.java:129)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10307)
	at rx.Observable.subscribe(Observable.java:10274)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:445)
	at rx.observables.BlockingObservable.single(BlockingObservable.java:342)
	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:117)
	at org.springframework.cloud.netflix.feign.ribbon.LoadBalancerFeignClient.execute(LoadBalancerFeignClient.java:63)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:97)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:76)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:103)
	at com.sun.proxy.$Proxy151.getDevice(Unknown Source)
	at com.bright.apollo.controller.TmallController.tmallCmd(TmallController.java:186)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:110)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.cloud.sleuth.instrument.web.TraceFilter.doFilter(TraceFilter.java:186)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2018-08-14 13:58:52,325 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END ERROR
2018-08-14 13:58:52,326 INFO (TmallController.java:193)- exception ====== feign.RetryableException: connect timed out executing GET http://springcloud-provider-device/device/b765010000
2018-08-14 13:58:52,326 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 14:02:35,881 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 14:02:35,882 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 14:02:35,947 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 14:02:35,951 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 14:02:35,952 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 14:02:36,224 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (271ms)
2018-08-14 14:02:36,224 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 14:02:36,225 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 06:02:36 GMT
2018-08-14 14:02:36,225 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 14:02:36,225 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 14:02:36,225 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 14:02:36,242 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"oboxId":9,"deviceType":"01","name":"Lamp1","state":"00fe0000000000","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 14:02:36,242 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (239-byte body)
2018-08-14 14:02:42,175 INFO (TmallController.java:190)- paramMap ====== {deviceState=fffe0000000000, deviceId=b765010000}
2018-08-14 14:02:42,177 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 14:02:42,178 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 14:02:42,231 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (52ms)
2018-08-14 14:02:42,232 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 14:02:42,233 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 06:02:42 GMT
2018-08-14 14:02:42,233 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 14:02:42,236 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 14:02:42,237 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 14:02:42,238 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"oboxId":9,"deviceType":"01","name":"Lamp1","state":"00fe0000000000","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 14:02:42,239 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (239-byte body)
2018-08-14 14:02:42,245 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 14:02:42,246 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 14:02:42,248 ERROR (FacadeController.java:206)- com.netflix.client.ClientException: Load balancer does not have available server for client: springcloud-provider-obox
2018-08-14 14:02:42,248 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 14:03:27,471 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 14:03:27,471 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 14:03:27,505 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 14:03:27,507 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 14:03:27,507 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 14:03:27,545 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (37ms)
2018-08-14 14:03:27,545 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 14:03:27,546 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 06:03:27 GMT
2018-08-14 14:03:27,546 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 14:03:27,546 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 14:03:27,546 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 14:03:27,547 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"oboxId":9,"deviceType":"01","name":"Lamp1","state":"00fe0000000000","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 14:03:27,547 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (239-byte body)
2018-08-14 14:03:29,478 INFO (TmallController.java:190)- paramMap ====== {deviceState=fffe0000000000, deviceId=b765010000}
2018-08-14 14:03:29,479 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 14:03:29,480 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 14:03:29,523 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (43ms)
2018-08-14 14:03:29,524 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 14:03:29,524 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 06:03:29 GMT
2018-08-14 14:03:29,524 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 14:03:29,525 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 14:03:29,525 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 14:03:29,525 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"oboxId":9,"deviceType":"01","name":"Lamp1","state":"00fe0000000000","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 14:03:29,525 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (239-byte body)
2018-08-14 14:03:29,526 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 14:03:29,526 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 14:03:29,778 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- HTTP/1.1 200 (251ms)
2018-08-14 14:03:29,778 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] content-type: application/json;charset=UTF-8
2018-08-14 14:03:29,778 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] date: Tue, 14 Aug 2018 06:03:29 GMT
2018-08-14 14:03:29,778 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] transfer-encoding: chunked
2018-08-14 14:03:29,779 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] x-application-context: springcloud-provider-obox:test:8200
2018-08-14 14:03:29,779 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] 
2018-08-14 14:03:29,795 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] {"message":"select success","status":200,"data":{"oboxId":9,"id":9,"obox_name":"OBOX9276","obox_serial_id":"7692000000","obox_version":"0a01154400051004","obox_status":1}}
2018-08-14 14:03:29,795 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- END HTTP (171-byte body)
2018-08-14 14:03:29,795 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> PUT http://springcloud-ali2/aliService/setDeviceStatus/7692000000?status=fffe0000000000&rfAddr=02 HTTP/1.1
2018-08-14 14:03:29,796 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> END HTTP (0-byte body)
2018-08-14 14:03:29,893 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- HTTP/1.1 200 (96ms)
2018-08-14 14:03:29,893 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] content-type: application/json;charset=UTF-8
2018-08-14 14:03:29,893 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] date: Tue, 14 Aug 2018 06:03:29 GMT
2018-08-14 14:03:29,893 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] transfer-encoding: chunked
2018-08-14 14:03:29,893 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] x-application-context: springcloud-ali2:8899
2018-08-14 14:03:29,894 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] 
2018-08-14 14:03:29,896 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] {"message":"update success","status":205}
2018-08-14 14:03:29,896 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- END HTTP (41-byte body)
2018-08-14 14:03:29,896 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 14:04:25,304 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=max, extensions={extension1=, extension2=}}}
2018-08-14 14:04:25,304 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 14:04:25,355 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 14:04:25,356 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 14:04:25,357 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 14:04:25,411 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (54ms)
2018-08-14 14:04:25,412 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 14:04:25,413 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 06:04:25 GMT
2018-08-14 14:04:25,413 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 14:04:25,414 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 14:04:25,415 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 14:04:25,416 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"oboxId":9,"deviceType":"01","name":"Lamp1","state":"00fe0000000000","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 14:04:25,417 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (239-byte body)
2018-08-14 14:04:29,758 INFO (TmallController.java:190)- paramMap ====== {deviceState=fffe0000000000, deviceId=b765010000}
2018-08-14 14:04:29,760 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 14:04:29,761 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 14:04:29,817 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (54ms)
2018-08-14 14:04:29,817 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 14:04:29,818 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 06:04:29 GMT
2018-08-14 14:04:29,819 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 14:04:29,819 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 14:04:29,820 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 14:04:29,821 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"oboxId":9,"deviceType":"01","name":"Lamp1","state":"00fe0000000000","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 14:04:29,821 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (239-byte body)
2018-08-14 14:04:29,823 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 14:04:29,823 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 14:04:29,918 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- HTTP/1.1 200 (93ms)
2018-08-14 14:04:29,919 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] content-type: application/json;charset=UTF-8
2018-08-14 14:04:29,919 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] date: Tue, 14 Aug 2018 06:04:29 GMT
2018-08-14 14:04:29,919 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] transfer-encoding: chunked
2018-08-14 14:04:29,920 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] x-application-context: springcloud-provider-obox:test:8200
2018-08-14 14:04:29,920 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] 
2018-08-14 14:04:29,920 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] {"message":"select success","status":200,"data":{"oboxId":9,"id":9,"obox_name":"OBOX9276","obox_serial_id":"7692000000","obox_version":"0a01154400051004","obox_status":1}}
2018-08-14 14:04:29,921 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- END HTTP (171-byte body)
2018-08-14 14:04:29,921 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> PUT http://springcloud-ali2/aliService/setDeviceStatus/7692000000?status=fffe0000000000&rfAddr=02 HTTP/1.1
2018-08-14 14:04:29,922 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> END HTTP (0-byte body)
2018-08-14 14:04:29,932 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- HTTP/1.1 200 (9ms)
2018-08-14 14:04:29,932 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] content-type: application/json;charset=UTF-8
2018-08-14 14:04:29,933 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] date: Tue, 14 Aug 2018 06:04:29 GMT
2018-08-14 14:04:29,933 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] transfer-encoding: chunked
2018-08-14 14:04:29,933 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] x-application-context: springcloud-ali2:8899
2018-08-14 14:04:29,933 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] 
2018-08-14 14:04:29,934 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] {"message":"update success","status":205}
2018-08-14 14:04:29,934 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- END HTTP (41-byte body)
2018-08-14 14:04:29,935 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 14:09:54,460 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=min, extensions={extension1=, extension2=}}}
2018-08-14 14:09:54,461 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 14:09:54,526 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 14:09:54,531 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 14:09:54,532 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 14:09:54,613 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (79ms)
2018-08-14 14:09:54,613 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 14:09:54,614 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 06:09:54 GMT
2018-08-14 14:09:54,614 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 14:09:54,615 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 14:09:54,615 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 14:09:54,616 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"oboxId":9,"deviceType":"01","name":"Lamp1","state":"00fe0000000000","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 14:09:54,616 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (239-byte body)
2018-08-14 14:09:58,955 INFO (TmallController.java:190)- paramMap ====== {deviceState=00fe0000000000, deviceId=b765010000}
2018-08-14 14:09:58,957 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 14:09:58,957 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 14:09:59,003 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (44ms)
2018-08-14 14:09:59,004 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 14:09:59,004 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 06:09:59 GMT
2018-08-14 14:09:59,005 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 14:09:59,005 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 14:09:59,005 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 14:09:59,006 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"oboxId":9,"deviceType":"01","name":"Lamp1","state":"00fe0000000000","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 14:09:59,006 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (239-byte body)
2018-08-14 14:09:59,007 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 14:09:59,007 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 14:09:59,079 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- HTTP/1.1 200 (71ms)
2018-08-14 14:09:59,080 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] content-type: application/json;charset=UTF-8
2018-08-14 14:09:59,081 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] date: Tue, 14 Aug 2018 06:09:59 GMT
2018-08-14 14:09:59,081 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] transfer-encoding: chunked
2018-08-14 14:09:59,082 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] x-application-context: springcloud-provider-obox:test:8200
2018-08-14 14:09:59,082 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] 
2018-08-14 14:09:59,083 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] {"message":"select success","status":200,"data":{"oboxId":9,"id":9,"obox_name":"OBOX9276","obox_serial_id":"7692000000","obox_version":"0a01154400051004","obox_status":0}}
2018-08-14 14:09:59,083 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- END HTTP (171-byte body)
2018-08-14 14:09:59,084 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> PUT http://springcloud-ali2/aliService/setDeviceStatus/7692000000?status=00fe0000000000&rfAddr=02 HTTP/1.1
2018-08-14 14:09:59,085 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> END HTTP (0-byte body)
2018-08-14 14:09:59,103 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- HTTP/1.1 200 (17ms)
2018-08-14 14:09:59,104 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] content-type: application/json;charset=UTF-8
2018-08-14 14:09:59,104 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] date: Tue, 14 Aug 2018 06:09:59 GMT
2018-08-14 14:09:59,105 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] transfer-encoding: chunked
2018-08-14 14:09:59,105 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] x-application-context: springcloud-ali2:8899
2018-08-14 14:09:59,106 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] 
2018-08-14 14:09:59,106 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] {"message":"update success","status":205}
2018-08-14 14:09:59,107 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- END HTTP (41-byte body)
2018-08-14 14:09:59,108 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
2018-08-14 14:13:03,554 INFO (TmallController.java:88)- ====== messageID ======{header={namespace=AliGenie.Iot.Device.Control, name=SetBrightness, messageId=e7e558bc-45da-4031-97a7-6f8b46fca185, payLoadVersion=1}, payload={accessToken=ec2293f4-0709-4451-b6f3-a777a494d4d9, deviceId=b765010000, deviceType=light, attribute=brightness, value=min, extensions={extension1=, extension2=}}}
2018-08-14 14:13:03,554 INFO (TmallController.java:97)-  ===== accessToken ====== ec2293f4-0709-4451-b6f3-a777a494d4d9
2018-08-14 14:13:03,617 INFO (TmallController.java:99)-  ===== redisToken ====== org.springframework.security.oauth2.provider.OAuth2Authentication@9c5c7281: Principal: org.springframework.security.core.userdetails.User@f9894274: Username: 15879618946; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: null; Not granted any authorities
2018-08-14 14:13:03,622 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 14:13:03,623 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 14:13:03,701 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (77ms)
2018-08-14 14:13:03,702 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 14:13:03,703 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 06:13:03 GMT
2018-08-14 14:13:03,703 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 14:13:03,704 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 14:13:03,704 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 14:13:03,706 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"oboxId":9,"deviceType":"01","name":"Lamp1","state":"00fe0000000000","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 14:13:03,706 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (239-byte body)
2018-08-14 14:13:03,708 INFO (TmallController.java:190)- paramMap ====== {deviceState=00fe0000000000, deviceId=b765010000}
2018-08-14 14:13:03,708 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> GET http://springcloud-provider-device/device/b765010000 HTTP/1.1
2018-08-14 14:13:03,709 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] ---> END HTTP (0-byte body)
2018-08-14 14:13:03,755 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- HTTP/1.1 200 (45ms)
2018-08-14 14:13:03,755 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] content-type: application/json;charset=UTF-8
2018-08-14 14:13:03,756 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] date: Tue, 14 Aug 2018 06:13:03 GMT
2018-08-14 14:13:03,757 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] transfer-encoding: chunked
2018-08-14 14:13:03,757 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] x-application-context: springcloud-provider-device:test:8900
2018-08-14 14:13:03,758 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] 
2018-08-14 14:13:03,759 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] {"message":"select success","status":200,"data":{"oboxId":9,"deviceType":"01","name":"Lamp1","state":"00fe0000000000","device_child_type":"02","version":"a0ffffffffffffff","serialId":"b765010000","addr":"02","obox_serial_id":"7692000000"}}
2018-08-14 14:13:03,759 DEBUG (Slf4jLogger.java:72)- [FeignDeviceClient#getDevice] <--- END HTTP (239-byte body)
2018-08-14 14:13:03,760 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> GET http://springcloud-provider-obox/obox/getObox/7692000000 HTTP/1.1
2018-08-14 14:13:03,761 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] ---> END HTTP (0-byte body)
2018-08-14 14:13:03,838 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- HTTP/1.1 200 (76ms)
2018-08-14 14:13:03,839 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] content-type: application/json;charset=UTF-8
2018-08-14 14:13:03,840 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] date: Tue, 14 Aug 2018 06:13:03 GMT
2018-08-14 14:13:03,840 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] transfer-encoding: chunked
2018-08-14 14:13:03,841 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] x-application-context: springcloud-provider-obox:test:8200
2018-08-14 14:13:03,842 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] 
2018-08-14 14:13:03,842 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] {"message":"select success","status":200,"data":{"oboxId":9,"id":9,"obox_name":"OBOX9276","obox_serial_id":"7692000000","obox_version":"0a01154400051004","obox_status":0}}
2018-08-14 14:13:03,843 DEBUG (Slf4jLogger.java:72)- [FeignOboxClient#getObox] <--- END HTTP (171-byte body)
2018-08-14 14:13:03,845 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> PUT http://springcloud-ali2/aliService/setDeviceStatus/7692000000?status=00fe0000000000&rfAddr=02 HTTP/1.1
2018-08-14 14:13:03,845 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] ---> END HTTP (0-byte body)
2018-08-14 14:13:03,862 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- HTTP/1.1 200 (15ms)
2018-08-14 14:13:03,863 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] content-type: application/json;charset=UTF-8
2018-08-14 14:13:03,863 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] date: Tue, 14 Aug 2018 06:13:03 GMT
2018-08-14 14:13:03,864 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] transfer-encoding: chunked
2018-08-14 14:13:03,864 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] x-application-context: springcloud-ali2:8899
2018-08-14 14:13:03,865 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] 
2018-08-14 14:13:03,866 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] {"message":"update success","status":205}
2018-08-14 14:13:03,866 DEBUG (Slf4jLogger.java:72)- [FeignAliClient#setDeviceStatus] <--- END HTTP (41-byte body)
2018-08-14 14:13:03,867 INFO (TmallController.java:205)- map ====== {"payload":{"deviceId":"b765010000"},"header":{"namespace":"AliGenie.Iot.Device.Control","name":"SetBrightnessResponse","messageId":"e7e558bc-45da-4031-97a7-6f8b46fca185","payLoadVersion":"1"}}
